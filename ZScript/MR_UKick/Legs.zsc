Class MR_uLegsToken : CustomInventory
{
	bool LegCheck, uehhh, NoInter, Rlg;
	double PlrAngle, PlrAngle2, MaxHeight, Bob;
	int InAir;
	Default
	{
		Inventory.MaxAmount 1;
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.AUTOACTIVATE
	}
	Override Void PostBeginPlay()
	{
		MaxHeight = 30;
		PlrAngle = 361;
		Super.PostBeginPlay();
	}
	
	Override Void Tick()
	{if(Owner)
	{if(GetAge()%350==0){Owner.UseInventory(Self);
	if(GetAge()%35==0 && Owner.Height>MaxHeight)MaxHeight=Owner.Height;}
	if(Owner.Pos.Z > Owner.FloorZ + 8)InAir+=abs(Owner.Vel.Z);
	else InAir=0;
	/*if(InAir>0){
		FCheckPosition data;
		Owner.CheckPosition(Owner.Pos.XY, true, data);
		if(data.StepThing)InAir=0;//Standing on another actor
	}*/
	Bob = Min(14, Owner.Player.ViewZ - Owner.Pos.Z - Owner.Player.ViewHeight);}
	Super.Tick();}
	
	States
	{
	Use:TNT1 A 1 A_OverLay(-855,"FirstPersonLegsStart", true);Fail;
	Pickup:TNT1 A 0{return true;}Stop;
		
		FirstPersonLegsStart:
			TNT1 A 1
			{
				A_OverLayScale(-855, .85 - invoker.Bob*.015, .85 - invoker.Bob*.015);
				A_OverlayFlags(-855, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-855, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-855, 20, (-pitch*2)+230 - invoker.Bob*2);
			}
		FirstPersonLegsStand:
			TNT1 A 0 A_JumpIf(!GetCVar("MR_UKickFPLegs"), "FirstPersonLegsNone");
			TNT1 A 0 A_JumpIf(vel.x > 0.8 || vel.x < -0.8 || vel.y > 0.8 || vel.y < -0.8, "FirstPersonLegsWalk1");
			TNT1 A 0 A_JumpIf(invoker.InAir > 6, "FirstPersonLegsJump");
			TNT1 A 0 A_JumpIf(Height < invoker.MaxHeight * .75, "FirstPersonLegsCrouch");
			TNT1 A 0 A_JumpIfInventory("MR_UKNoLegs", 1, "FirstPersonLegsLeft");
			#### # 0 A_JumpIf(invoker.LegCheck, 5);
			#### # 0{if(invoker.PlrAngle==361)invoker.PlrAngle=Angle;}
			#### # 0 A_Jumpif(Angle>invoker.PlrAngle+30, "FPLegsTurnR");
			#### # 0 A_Jumpif(Angle<invoker.PlrAngle-30, "FPLestTurnL");
			STAN A 1 
			{
				if(invoker.NoInter)invoker.PlrAngle=Angle;
				A_OverlayFlags(-855, PSPF_PLAYERTRANSLATED, True);
				Float VOfst = DeltaAngle(Angle, invoker.PlrAngle)*.7;
				if(VOfst < 0)VOfst = 0;
				A_OverlayOffset(-855, 20 + DeltaAngle(Angle, invoker.PlrAngle)*1.95, (-pitch*2)+230 - VOfst - invoker.Bob*2);
				A_OverLayScale(-855, 0.85 - invoker.Bob*.015, 0.85 - invoker.Bob*.015);
				A_OverlayPivotAlign(-855, PSPA_CENTER, PSPA_BOTTOM);
				A_OverlayRotate(-855, DeltaAngle(Angle, invoker.PlrAngle)*.7, WOF_INTERPOLATE);
				if(invoker.NoInter){A_OverlayFlags(-855, PSPF_INTERPOLATE, False);invoker.NoInter=False;}
			}
			Loop;
			TNT1 A 0 A_JumpIf(Height < invoker.MaxHeight * .75, "FirstPersonLegsCrouch");
			TNT1 A 0 A_JumpIf(invoker.InAir > 6, "FirstPersonLegsJump");
			#### # 0 A_Jumpif(Angle>invoker.PlrAngle+30, "FPLegsTurnR");
			#### # 0 A_Jumpif(Angle<invoker.PlrAngle-30, "FPLestTurnL");
			STAN M 1
			{
				if(invoker.NoInter)invoker.PlrAngle=Angle;
				A_OverlayFlags(-855, PSPF_PLAYERTRANSLATED, True);
				Float VOfst = DeltaAngle(Angle, invoker.PlrAngle)*.7;
				if(VOfst < 0)VOfst = 0;
				A_OverlayOffset(-855, 20 + DeltaAngle(Angle, invoker.PlrAngle)*1.95, (-pitch*2)+230 - VOfst - invoker.Bob*2);
				A_OverLayScale(-855, 0.85 - invoker.Bob*.015, 0.85 - invoker.Bob*.015);
				A_OverlayPivotAlign(-855, PSPA_CENTER, PSPA_BOTTOM);
				A_OverlayRotate(-855, DeltaAngle(Angle, invoker.PlrAngle)*.7, WOF_INTERPOLATE);
				A_OverlayFlags(-855, PSPF_ADDWEAPON, False);
				if(invoker.NoInter){A_OverlayFlags(-855, PSPF_INTERPOLATE, False);invoker.NoInter=False;}
			}
			Loop;
		FPLegsTurnStillL:
			STAN T 0;
			#### # 0 A_Jump(256, 2);
		FPLegsTurnStillR:
			STAN O 0;
			STAN ##### 1
			{
				int Ofst = 0;
				if((invoker.Rlg && invoker.LegCheck) ||(!invoker.Rlg && !invoker.LegCheck))Ofst = 10;
				if((invoker.Rlg && !invoker.LegCheck) || (!invoker.Rlg && invoker.LegCheck))Ofst = -30;
				A_OverlayFlags(-849, PSPF_PLAYERTRANSLATED, True);
				Float VOfst = DeltaAngle(Angle, invoker.PlrAngle2)*.3;
				if(VOfst < 0)VOfst = 0;
				A_OverlayOffset(-849, 20 + DeltaAngle(Angle, invoker.PlrAngle2)*1.2, (-pitch*2)+235+ofst - VOfst - invoker.Bob*2);
				A_OverLayScale(-849, .85 - invoker.Bob*.015, .85 - invoker.Bob*.015);
				A_OverlayPivotAlign(-849, PSPA_CENTER, PSPA_BOTTOM);
				A_OverlayRotate(-849, DeltaAngle(Angle, invoker.PlrAngle2)*.3, WOF_INTERPOLATE);
				A_OverlayFlags(-849, PSPF_INTERPOLATE|PSPF_ADDWEAPON, False);
			}
			STAN # 1
			{
				int Ofst = 0;
				if((invoker.Rlg && invoker.LegCheck) ||(!invoker.Rlg && !invoker.LegCheck))Ofst = 10;
				if((invoker.Rlg && !invoker.LegCheck) || (!invoker.Rlg && invoker.LegCheck))Ofst = -10;
				A_OverlayFlags(-849, PSPF_PLAYERTRANSLATED, True);
				invoker.PlrAngle2+=DeltaAngle(invoker.PlrAngle2, Angle)*.5;
				Float VOfst = DeltaAngle(Angle, invoker.PlrAngle2)*.7;
				if(VOfst < 0)VOfst = 0;
				A_OverlayOffset(-849, 20 + DeltaAngle(Angle, invoker.PlrAngle2)*1.95, (-pitch*2)+240+ofst - VOfst - invoker.Bob*2);
				A_OverLayScale(-849, .95 - invoker.Bob*.015, .95 - invoker.Bob*.015);
				A_OverlayRotate(-849, DeltaAngle(Angle, invoker.PlrAngle2)*.1, WOF_INTERPOLATE);
			}
			STAN # 1
			{
				int Ofst = 0;
				if((invoker.Rlg && invoker.LegCheck) ||(!invoker.Rlg && !invoker.LegCheck))Ofst = 10;
				if((invoker.Rlg && !invoker.LegCheck) || (!invoker.Rlg && invoker.LegCheck))Ofst = 0;
				A_OverlayFlags(-849, PSPF_PLAYERTRANSLATED, True);
				invoker.PlrAngle2+=DeltaAngle(invoker.PlrAngle2, Angle)*.75;
				Float VOfst = DeltaAngle(Angle, invoker.PlrAngle2)*.7;
				if(VOfst < 0)VOfst = 0;
				A_OverlayOffset(-849, 20 + DeltaAngle(Angle, invoker.PlrAngle2)*1.95, (-pitch*2)+245+ofst - VOfst - invoker.Bob*2);
				A_OverLayScale(-849, 1 - invoker.Bob*.015, 1 - invoker.Bob*.015);
				A_OverlayRotate(-849, DeltaAngle(Angle, invoker.PlrAngle2)*.1, WOF_INTERPOLATE);
			}
			STAN # 1
			{
				int Ofst = 0;
				if((invoker.Rlg && invoker.LegCheck) ||(!invoker.Rlg && !invoker.LegCheck))Ofst = 10;
				if((invoker.Rlg && !invoker.LegCheck) || (!invoker.Rlg && invoker.LegCheck))Ofst = -10;
				A_OverlayFlags(-849, PSPF_PLAYERTRANSLATED, True);
				invoker.PlrAngle2+=DeltaAngle(invoker.PlrAngle2, Angle)*.8;
				Float VOfst = DeltaAngle(Angle, invoker.PlrAngle2)*.7;
				if(VOfst < 0)VOfst = 0;
				A_OverlayOffset(-849, 20 + DeltaAngle(Angle, invoker.PlrAngle2)*1.95, (-pitch*2)+235+ofst - VOfst - invoker.Bob*2);
				A_OverLayScale(-849, .95 - invoker.Bob*.015, .95 - invoker.Bob*.015);
				A_OverlayRotate(-849, DeltaAngle(Angle, invoker.PlrAngle2)*.1, WOF_INTERPOLATE);
			}
			STAN # 1
			{
				int Ofst = 0;
				if((invoker.Rlg && invoker.LegCheck) ||(!invoker.Rlg && !invoker.LegCheck))Ofst = 10;
				if((invoker.Rlg && !invoker.LegCheck) || (!invoker.Rlg && invoker.LegCheck))Ofst = -10;
				A_OverlayFlags(-849, PSPF_PLAYERTRANSLATED, True);
				invoker.PlrAngle2=Angle;
				Float VOfst = DeltaAngle(Angle, invoker.PlrAngle2)*.7;
				if(VOfst < 0)VOfst = 0;
				A_OverlayOffset(-849, 20 + DeltaAngle(Angle, invoker.PlrAngle2)*1.95, (-pitch*2)+230+ofst - VOfst - invoker.Bob*2);
				A_OverLayScale(-849, .9 - invoker.Bob*.015, .9 - invoker.Bob*.015);
				A_OverlayRotate(-849, DeltaAngle(Angle, invoker.PlrAngle2)*.1, WOF_INTERPOLATE);
			}
			STAN # 1
			{
				int Ofst = 0;
				if((invoker.Rlg && invoker.LegCheck) ||(!invoker.Rlg && !invoker.LegCheck))Ofst = 10;
				A_OverlayFlags(-849, PSPF_PLAYERTRANSLATED, True);
				invoker.PlrAngle2=Angle;
				Float VOfst = DeltaAngle(Angle, invoker.PlrAngle2)*.7;
				if(VOfst < 0)VOfst = 0;
				A_OverlayOffset(-849, 20 + DeltaAngle(Angle, invoker.PlrAngle2)*1.95, (-pitch*2)+230+ofst - VOfst - invoker.Bob*2);
				A_OverLayScale(-849, 0.85 - invoker.Bob*.015, 0.85 - invoker.Bob*.015);
				A_OverlayRotate(-849, DeltaAngle(Angle, invoker.PlrAngle2)*.1, WOF_INTERPOLATE);
			}
			Stop;
		FPLestTurnL:
			STAN O 0 {invoker.PlrAngle2 = invoker.PlrAngle;invoker.Rlg=False;A_Overlay(-849, "FPLegsTurnStillL");}
			#### # 0 A_Jump(256, 2);
		FPLegsTurnR:
			STAN T 0 {invoker.PlrAngle2 = invoker.PlrAngle;invoker.Rlg=True;A_Overlay(-849, "FPLegsTurnStillR");}
			STAN # 1
			{
				int Ofst = 0;
				if((invoker.Rlg && !invoker.LegCheck) ||(!invoker.Rlg && invoker.LegCheck))Ofst = 20;
				A_OverlayFlags(-855, PSPF_PLAYERTRANSLATED, True);
				Float VOfst = DeltaAngle(Angle, invoker.PlrAngle)*.7;
				if(VOfst < 0)VOfst = 0;
				A_OverlayOffset(-855, 20 + DeltaAngle(Angle, invoker.PlrAngle)*1.95, (-pitch*2)+235+Ofst - VOfst - invoker.Bob*2);
				A_OverLayScale(-855, .9 - invoker.Bob*.015, .9 - invoker.Bob*.015);
				A_OverlayPivotAlign(-855, PSPA_CENTER, PSPA_BOTTOM);
				A_OverlayRotate(-855, DeltaAngle(Angle, invoker.PlrAngle)*.7, WOF_INTERPOLATE);
				A_OverlayFlags(-855, PSPF_INTERPOLATE|PSPF_ADDWEAPON, False);
			}
			STAN # 1
			{
				int Ofst = 0;
				if((invoker.Rlg && !invoker.LegCheck) ||(!invoker.Rlg && invoker.LegCheck))Ofst = 20;
				A_OverlayFlags(-855, PSPF_PLAYERTRANSLATED, True);
				invoker.PlrAngle+=DeltaAngle(invoker.PlrAngle, Angle)*.5;
				Float VOfst = DeltaAngle(Angle, invoker.PlrAngle)*.7;
				if(VOfst < 0)VOfst = 0;
				A_OverlayOffset(-855, 20 + DeltaAngle(Angle, invoker.PlrAngle)*1.95, (-pitch*2)+240+Ofst - VOfst - invoker.Bob*2);
				A_OverLayScale(-855, .95 - invoker.Bob*.015, .95 - invoker.Bob*.015);
				A_OverlayRotate(-855, DeltaAngle(Angle, invoker.PlrAngle)*.7, WOF_INTERPOLATE);
			}
			STAN # 1
			{
				int Ofst = 0;
				if((invoker.Rlg && !invoker.LegCheck) ||(!invoker.Rlg && invoker.LegCheck))Ofst = 20;
				A_OverlayFlags(-855, PSPF_PLAYERTRANSLATED, True);
				invoker.PlrAngle+=DeltaAngle(invoker.PlrAngle, Angle)*.75;
				Float VOfst = DeltaAngle(Angle, invoker.PlrAngle)*.7;
				if(VOfst < 0)VOfst = 0;
				A_OverlayOffset(-855, 20 + DeltaAngle(Angle, invoker.PlrAngle)*1.95, (-pitch*2)+245+Ofst - VOfst - invoker.Bob*2);
				A_OverLayScale(-855, 1 - invoker.Bob*.015, 1 - invoker.Bob*.015);
				A_OverlayRotate(-855, DeltaAngle(Angle, invoker.PlrAngle)*.7, WOF_INTERPOLATE);
			}
			STAN # 1
			{
				int Ofst = 0;
				if((invoker.Rlg && !invoker.LegCheck) ||(!invoker.Rlg && invoker.LegCheck))Ofst = 20;
				A_OverlayFlags(-855, PSPF_PLAYERTRANSLATED, True);
				invoker.PlrAngle+=DeltaAngle(invoker.PlrAngle, Angle)*.8;
				Float VOfst = DeltaAngle(Angle, invoker.PlrAngle)*.7;
				if(VOfst < 0)VOfst = 0;
				A_OverlayOffset(-855, 20 + DeltaAngle(Angle, invoker.PlrAngle)*1.95, (-pitch*2)+235+Ofst - VOfst - invoker.Bob*2);
				A_OverLayScale(-855, .9 - invoker.Bob*.015, .9 - invoker.Bob*.015);
				A_OverlayRotate(-855, DeltaAngle(Angle, invoker.PlrAngle)*.7, WOF_INTERPOLATE);
			}
			STAN # 1
			{
				int Ofst = 0;
				if((invoker.Rlg && !invoker.LegCheck) ||(!invoker.Rlg && invoker.LegCheck))Ofst = 20;
				A_OverlayFlags(-855, PSPF_PLAYERTRANSLATED, True);
				invoker.PlrAngle=Angle;
				Float VOfst = DeltaAngle(Angle, invoker.PlrAngle)*.7;
				if(VOfst < 0)VOfst = 0;
				A_OverlayOffset(-855, 20 + DeltaAngle(Angle, invoker.PlrAngle)*1.95, (-pitch*2)+230+Ofst - VOfst - invoker.Bob*2);
				A_OverLayScale(-855, .85 - invoker.Bob*.015, .85 - invoker.Bob*.015);
				invoker.NoInter = true;
				A_OverlayRotate(-855, DeltaAngle(Angle, invoker.PlrAngle)*.7, WOF_INTERPOLATE);
			}
			STAN ##### 1
			{
				int Ofst = 0;
				if((invoker.Rlg && !invoker.LegCheck) ||(!invoker.Rlg && invoker.LegCheck))Ofst = 20;
				A_OverlayFlags(-855, PSPF_PLAYERTRANSLATED, True);
				invoker.PlrAngle=Angle;
				Float VOfst = DeltaAngle(Angle, invoker.PlrAngle)*.7;
				if(VOfst < 0)VOfst = 0;
				A_OverlayOffset(-855, 20 + DeltaAngle(Angle, invoker.PlrAngle)*1.95, (-pitch*2)+230+Ofst - VOfst - invoker.Bob*2);
				A_OverLayScale(-855, .85 - invoker.Bob*.015, .85 - invoker.Bob*.015);
				invoker.NoInter = true;
				A_OverlayRotate(-855, DeltaAngle(Angle, invoker.PlrAngle)*.7, WOF_INTERPOLATE);
				Return A_Jumpif(Angle>invoker.PlrAngle+30, "FPLegsTurnR");
				Return A_Jumpif(Angle<invoker.PlrAngle-30, "FPLestTurnL");
				Return A_JumpIf(vel.x > 0.8 || vel.x < -0.8 || vel.y > 0.8 || vel.y < -0.8, "FirstPersonLegsWalk1");
				Return A_JumpIf(invoker.InAir > 6, "FirstPersonLegsJump");
				Return A_JumpIf(Height < invoker.MaxHeight * .75, "FirstPersonLegsCrouch");
			}
			Goto FirstPersonLegsStand;
		FirstPersonLegsLeft://And right
			STAN O 0 A_JumpIf(invoker.PlrAngle-Angle>0, 2);
			STAN T 0;
		FirstPersonLegWait:
			STAN # 1 
			{
				A_OverlayFlags(-855, PSPF_PLAYERTRANSLATED, True);
				Float VOfst = Clamp(DeltaAngle(Angle, invoker.PlrAngle)*.7, -30, 30);
				if(VOfst < 0)VOfst = 0;
				A_OverlayOffset(-855, 20 + Clamp(DeltaAngle(Angle, invoker.PlrAngle)*1.95, -30, 30), (-pitch*2)+230 - VOfst - invoker.Bob*2);
				A_OverLayScale(-855, .85 - invoker.Bob*.015, .85 - invoker.Bob*.015);
				A_OverlayPivotAlign(-855, PSPA_CENTER, PSPA_BOTTOM);
				A_OverlayRotate(-855, Clamp(DeltaAngle(Angle, invoker.PlrAngle)*.7, -30, 30), WOF_INTERPOLATE);
				A_OverlayFlags(-855, PSPF_INTERPOLATE, False);
				invoker.LegCheck = True;
				invoker.NoInter = true;
				return A_JumpIfInventory("MR_UKNoLegs", 2, "FirstPersonLegsPreNone");
			}
			STAN # 0 A_JumpIf(CountInv("MR_UKNoLegs")<1, "FirstPersonLegsStand");
			Loop;
			
		FirstPersonLegsCrouch:
			TNT1 A 0 A_StartSound("IronSights", 0); //Sound when player crouches
		FirstPersonLegsCrouchContinue:
			TNT1 A 0 A_JumpIf(invoker.InAir > 6, "FirstPersonLegsJump");
			TNT1 A 0 A_JumpIf(vel.x > 0.8 || vel.x < -0.8 || vel.y > 0.8 || vel.y < -0.8, "FirstPersonLegsWalkCrouch");
			TNT1 A 0 A_JumpIf(Height >= invoker.MaxHeight * .75, "FirstPersonLegsStand");
			STAN N 1 
			{
				invoker.PlrAngle=Angle;
				A_OverlayFlags(-855, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-855, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-855, 0, Max(0, (-pitch*2)+230 - invoker.Bob*2));
				A_OverLayScale(-855, 1 - invoker.Bob*.015, 1 - invoker.Bob*.015);
				A_OverlayPivotAlign(-855, PSPA_CENTER, PSPA_BOTTOM);
				A_OverlayRotate(-855, 0, WOF_INTERPOLATE);
			}
			Loop;
		FirstPersonLegsWalkCrouch:
			TNT1 A 0 A_JumpIf(invoker.InAir > 6, "FirstPersonLegsJump");
			STAN RRRRRRSSSSSSNNNNNN 1
			{
				If(vel.x > 6.0 || vel.x < -6.0 || vel.y > 6.0 || vel.y < -6.0)A_SetTics(3);
				A_OverlayFlags(-855, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-855, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-855, 0, Max(40, (-pitch*2)+230 - invoker.Bob*2), WOF_INTERPOLATE);
				A_OverLayScale(-855, 1 - invoker.Bob*.015, 1 - invoker.Bob*.015, WOF_INTERPOLATE);
				If(Height >= invoker.MaxHeight * .75)Return A_Jump(256, "FirstPersonLegsStand");
				if(CountInv("MR_UKNoLegs")>0)Return A_Jump(256, "FirstPersonLegsLeft");
				return A_JumpIf(invoker.InAir > 6, "FirstPersonLegsJump");
			}
			Goto FirstPersonLegsStand;
			
			
		FirstPersonLegsWalk1:
			TNT1 A 0 A_JumpIf(invoker.InAir > 6, "FirstPersonLegsJump");
			TNT1 A 0 A_JumpIf(Height < invoker.MaxHeight * .75, "FirstPersonLegsWalkCrouch");
			TNT1 A 0 A_JumpIf(invoker.LegCheck, "FirstPersonLegsWalk2");
			TNT1 A 0 A_JumpIf(invoker.InAir > 6, "FirstPersonLegsJump");
			STAN BCCDDE 2
			{
				If(vel.x > 9.0 || vel.x < -9.0 || vel.y > 9.0 || vel.y < -9.0)A_SetTics(1);
				invoker.LegCheck=True;
				if(invoker.NoInter)invoker.PlrAngle=Angle;
				if(vel.xy.Length()==0)A_SetTics(1);
				//else invoker.PlrAngle=Angle;
				invoker.PlrAngle+=DeltaAngle(invoker.PlrAngle, Angle)*.3;
				A_OverlayFlags(-855, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-855, PSPF_PLAYERTRANSLATED, True);
				A_OverLayScale(-855, .85 - invoker.Bob*.015, .85 - invoker.Bob*.015);
				A_OverlayOffset(-855, 20, (-pitch*2)+230 - invoker.Bob*2);
				A_OverlayPivotAlign(-855, PSPA_CENTER, PSPA_BOTTOM);
				A_OverlayRotate(-855, DeltaAngle(Angle, invoker.PlrAngle)*.7, WOF_INTERPOLATE);
				A_OverlayFlags(-855, PSPF_INTERPOLATE, False);invoker.NoInter=False;
				if(CountInv("MR_UKNoLegs")>0)Return A_Jump(256, "FirstPersonLegsLeft");
				return A_JumpIf(invoker.InAir > 6, "FirstPersonLegsJump");
			}
			STAN EFF 2
			{
				If(vel.x > 9.0 || vel.x < -9.0 || vel.y > 9.0 || vel.y < -9.0)A_SetTics(1);
				invoker.LegCheck=True;
				invoker.PlrAngle+=DeltaAngle(invoker.PlrAngle, Angle)*.3;
				A_OverlayFlags(-855, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-855, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-855, 20, (-pitch*2)+230 - invoker.Bob*2);
				A_OverlayPivotAlign(-855, PSPA_CENTER, PSPA_BOTTOM);
				A_OverlayRotate(-855, DeltaAngle(Angle, invoker.PlrAngle)*.7, WOF_INTERPOLATE);
				A_OverlayFlags(-855, PSPF_INTERPOLATE, False);
				if(CountInv("MR_UKNoLegs")>0)Return A_Jump(256, "FirstPersonLegsLeft");
				return A_JumpIf(invoker.InAir > 6, "FirstPersonLegsJump");
			}
			STAN MM 1
			{
			invoker.PlrAngle+=DeltaAngle(invoker.PlrAngle, Angle)*.3;
			if(vel.XY.Length()>2)invoker.PlrAngle+=DeltaAngle(invoker.PlrAngle, Angle)*.3;
			A_OverlayOffset(-855, 20, (-pitch*2)+230 - invoker.Bob*2);
			A_OverlayPivotAlign(-855, PSPA_CENTER, PSPA_BOTTOM);
			A_OverlayRotate(-855, DeltaAngle(Angle, invoker.PlrAngle)*.7, WOF_INTERPOLATE);
			A_OverlayFlags(-855, PSPF_INTERPOLATE, False);
			if(vel.x > 1.2 || vel.x < -1.2 || vel.y > 1.2 || vel.y < -1.2)
			return A_JumpIf(vel.x > 0.8 || vel.x < -0.8 || vel.y > 0.8 || vel.y < -0.8, "FirstPersonLegsWalk2");
			return A_JumpIf(invoker.InAir > 6, "FirstPersonLegsJump");
			}
			#### # 0 {invoker.PlrAngle=Angle;}
			Goto FirstPersonLegsStand;
		FirstPersonLegsWalk2:
			TNT1 A 0 A_JumpIf(invoker.InAir > 6, "FirstPersonLegsJump");
			TNT1 A 0 A_JumpIf(Height < invoker.MaxHeight * .75, "FirstPersonLegsWalkCrouch");
			STAN GHHIIJJKLL 2 
			{
				If(vel.x > 9.0 || vel.x < -9.0 || vel.y > 9.0 || vel.y < -9.0)A_SetTics(1);
				invoker.LegCheck=False;
				if(vel.xy.Length()==0)A_SetTics(1);
				if(invoker.NoInter)invoker.PlrAngle = Angle;
				//else invoker.PlrAngle=Angle;
				A_OverlayFlags(-855, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-855, PSPF_PLAYERTRANSLATED, True);
				A_OverLayScale(-855, .85 - invoker.Bob*.015, .85 - invoker.Bob*.015);
				invoker.PlrAngle+=DeltaAngle(invoker.PlrAngle, Angle)*.3;
				if(vel.XY.Length()>2)invoker.PlrAngle+=DeltaAngle(invoker.PlrAngle, Angle)*.3;
				A_OverlayOffset(-855, 20, (-pitch*2)+230 - invoker.Bob*2);
				A_OverlayPivotAlign(-855, PSPA_CENTER, PSPA_BOTTOM);
				A_OverlayRotate(-855, DeltaAngle(Angle, invoker.PlrAngle)*.7, WOF_INTERPOLATE);
				A_OverlayFlags(-855, PSPF_INTERPOLATE, False);invoker.NoInter=False;
				if(CountInv("MR_UKNoLegs")>0)Return A_Jump(256, "FirstPersonLegsLeft");
				return A_JumpIf(invoker.InAir > 6, "FirstPersonLegsJump");
			}
			STAN AA 1
			{
			invoker.PlrAngle+=DeltaAngle(invoker.PlrAngle, Angle)*.3;
			if(vel.XY.Length()>2)invoker.PlrAngle+=DeltaAngle(invoker.PlrAngle, Angle)*.3;
			A_OverlayOffset(-855, 20, (-pitch*2)+230 - invoker.Bob*2);
			A_OverlayPivotAlign(-855, PSPA_CENTER, PSPA_BOTTOM);
			A_OverlayRotate(-855, DeltaAngle(Angle, invoker.PlrAngle)*.7, WOF_INTERPOLATE);
			A_OverlayFlags(-855, PSPF_INTERPOLATE, False);
			if(vel.x > 1.2 || vel.x < -1.2 || vel.y > 1.2 || vel.y < -1.2)
			return A_JumpIf(vel.x > 0.8 || vel.x < -0.8 || vel.y > 0.8 || vel.y < -0.8, "FirstPersonLegsWalk1");
			return A_JumpIf(invoker.InAir > 6, "FirstPersonLegsJump");
			}
			Goto FirstPersonLegsStand;
			
			
		FirstPersonLegsJump:
			STAN P 0 A_JumpIf(invoker.LegCheck, 2);
			STAN Q 0;
			STAN ## 1
			{
				invoker.PlrAngle=Angle;
				A_OverlayFlags(-855, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-855, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-855, 20, (-pitch*2)+230 - invoker.Bob*2);
				A_OverLayScale(-855, .85 - invoker.Bob*.015, .85 - invoker.Bob*.015);
				A_OverlayPivotAlign(-855, PSPA_CENTER, PSPA_BOTTOM);
				A_OverlayRotate(-855, 0, WOF_INTERPOLATE);
				if(invoker.NoInter){A_OverlayFlags(-855, PSPF_INTERPOLATE, False);invoker.NoInter=False;}
				Return A_JumpIfInventory("MR_UKNoLegs", 1, "FirstPersonLegsLeft");
			}
		FirstPersonLegsJumpin:
			STAN I 0 A_JumpIf(invoker.LegCheck, 2);
			STAN U 0;
			STAN # 1
			{
				invoker.PlrAngle=Angle;
				A_OverlayFlags(-855, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-855, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-855, 20, (-pitch*2)+230 - invoker.Bob*2);
				A_OverLayScale(-855, .85 - invoker.Bob*.015, .85 - invoker.Bob*.015);
				A_OverlayPivotAlign(-855, PSPA_CENTER, PSPA_BOTTOM);
				if(invoker.NoInter){A_OverlayFlags(-855, PSPF_INTERPOLATE, False);invoker.NoInter=False;}
				Return A_JumpIfInventory("MR_UKNoLegs", 1, "FirstPersonLegsLeft");
			}
			STAN I 0 A_JumpIf(invoker.InAir > 6, "FirstPersonLegsJumpIn");
			Goto FirstPersonLegsStand;
		FirstPersonLegsPreNone:
			TNT1 A 0 {invoker.NoInter=True;}
		FirstPersonLegsNone:
			TNT1 A 2 A_JumpIf(CountInv("MR_UKNoLegs")<2 && GetCVar("MR_UKickFPLegs"), "FirstPersonLegsStand");
			Loop;
			}
}

Class MR_UKNoLegs : Inventory {default{inventory.MaxAmount 2;}}